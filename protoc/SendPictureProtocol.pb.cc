// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SendPictureProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SendPictureProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PictureProtocol {

namespace {

const ::google::protobuf::Descriptor* Head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Head_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginResult_Flag_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeCamera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeCamera_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFaceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFaceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendCarMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendCarMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBackMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBackMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectPicture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectPicture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraStatusList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraStatusList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SendPictureProtocol_2eproto() {
  protobuf_AddDesc_SendPictureProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SendPictureProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  Head_descriptor_ = file->message_type(0);
  static const int Head_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, message_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, message_type_),
  };
  Head_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Head_descriptor_,
      Head::default_instance_,
      Head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Head, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Head));
  CameraMessage_descriptor_ = file->message_type(1);
  static const int CameraMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMessage, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMessage, camera_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMessage, camera_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMessage, camera_username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMessage, camera_passowrd_),
  };
  CameraMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraMessage_descriptor_,
      CameraMessage::default_instance_,
      CameraMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraMessage));
  Login_descriptor_ = file->message_type(2);
  static const int Login_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, os_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  LoginResult_descriptor_ = file->message_type(3);
  static const int LoginResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, camera_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, message_),
  };
  LoginResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResult_descriptor_,
      LoginResult::default_instance_,
      LoginResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResult));
  LoginResult_Flag_descriptor_ = LoginResult_descriptor_->enum_type(0);
  ChangeCamera_descriptor_ = file->message_type(4);
  static const int ChangeCamera_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCamera, camera_message_),
  };
  ChangeCamera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeCamera_descriptor_,
      ChangeCamera::default_instance_,
      ChangeCamera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCamera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCamera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeCamera));
  SendFaceMessage_descriptor_ = file->message_type(5);
  static const int SendFaceMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, face_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, face_contrast_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, rect_pic_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, face_show_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, rect_pic_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, camera_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, program_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, picture_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, back_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, rect_pic_back_),
  };
  SendFaceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFaceMessage_descriptor_,
      SendFaceMessage::default_instance_,
      SendFaceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFaceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFaceMessage));
  SendCarMessage_descriptor_ = file->message_type(6);
  static const int SendCarMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, license_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, license_plate_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, license_plate_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, license_car_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, license_plate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, license_plate_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, rect_pic_license_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, camera_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, program_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, picture_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, back_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, rect_pic_back_),
  };
  SendCarMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendCarMessage_descriptor_,
      SendCarMessage::default_instance_,
      SendCarMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCarMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendCarMessage));
  SendBackMessage_descriptor_ = file->message_type(7);
  static const int SendBackMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBackMessage, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBackMessage, back_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBackMessage, rect_pic_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBackMessage, picture_name_),
  };
  SendBackMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBackMessage_descriptor_,
      SendBackMessage::default_instance_,
      SendBackMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBackMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBackMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBackMessage));
  RectPicture_descriptor_ = file->message_type(8);
  static const int RectPicture_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectPicture, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectPicture, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectPicture, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectPicture, height_),
  };
  RectPicture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RectPicture_descriptor_,
      RectPicture::default_instance_,
      RectPicture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectPicture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectPicture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RectPicture));
  CameraStatus_descriptor_ = file->message_type(9);
  static const int CameraStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraStatus, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraStatus, status_),
  };
  CameraStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraStatus_descriptor_,
      CameraStatus::default_instance_,
      CameraStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraStatus));
  CameraStatusList_descriptor_ = file->message_type(10);
  static const int CameraStatusList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraStatusList, camerastatus_),
  };
  CameraStatusList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraStatusList_descriptor_,
      CameraStatusList::default_instance_,
      CameraStatusList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraStatusList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraStatusList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraStatusList));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SendPictureProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Head_descriptor_, &Head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraMessage_descriptor_, &CameraMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResult_descriptor_, &LoginResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeCamera_descriptor_, &ChangeCamera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFaceMessage_descriptor_, &SendFaceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendCarMessage_descriptor_, &SendCarMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBackMessage_descriptor_, &SendBackMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RectPicture_descriptor_, &RectPicture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraStatus_descriptor_, &CameraStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraStatusList_descriptor_, &CameraStatusList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SendPictureProtocol_2eproto() {
  delete Head::default_instance_;
  delete Head_reflection_;
  delete CameraMessage::default_instance_;
  delete CameraMessage_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete LoginResult::default_instance_;
  delete LoginResult_reflection_;
  delete ChangeCamera::default_instance_;
  delete ChangeCamera_reflection_;
  delete SendFaceMessage::default_instance_;
  delete SendFaceMessage_reflection_;
  delete SendCarMessage::default_instance_;
  delete SendCarMessage_reflection_;
  delete SendBackMessage::default_instance_;
  delete SendBackMessage_reflection_;
  delete RectPicture::default_instance_;
  delete RectPicture_reflection_;
  delete CameraStatus::default_instance_;
  delete CameraStatus_reflection_;
  delete CameraStatusList::default_instance_;
  delete CameraStatusList_reflection_;
}

void protobuf_AddDesc_SendPictureProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031SendPictureProtocol.proto\022\017PictureProt"
    "ocol\"2\n\004Head\022\024\n\014message_size\030\001 \002(\007\022\024\n\014me"
    "ssage_type\030\002 \002(\007\"|\n\rCameraMessage\022\021\n\tcam"
    "era_id\030\001 \002(\004\022\021\n\tcamera_ip\030\002 \002(\t\022\023\n\013camer"
    "a_port\030\003 \002(\r\022\027\n\017camera_username\030\004 \002(\t\022\027\n"
    "\017camera_passowrd\030\005 \002(\t\"T\n\005Login\022\n\n\002id\030\001 "
    "\002(\004\022\020\n\010username\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022"
    "\017\n\007version\030\004 \002(\r\022\n\n\002os\030\005 \002(\t\"\265\001\n\013LoginRe"
    "sult\022/\n\004flag\030\001 \002(\0162!.PictureProtocol.Log"
    "inResult.Flag\0226\n\016camera_message\030\002 \003(\0132\036."
    "PictureProtocol.CameraMessage\022\017\n\007message"
    "\030\003 \001(\t\",\n\004Flag\022\006\n\002ok\020\001\022\010\n\004fail\020\002\022\022\n\016upda"
    "te_version\020\003\"F\n\014ChangeCamera\0226\n\016camera_m"
    "essage\030\001 \003(\0132\036.PictureProtocol.CameraMes"
    "sage\"\357\002\n\017SendFaceMessage\022\021\n\tcamera_id\030\001 "
    "\002(\004\022\022\n\nface_score\030\002 \002(\r\022\031\n\021face_contrast"
    "_pic\030\003 \002(\014\0223\n\rrect_pic_face\030\004 \001(\0132\034.Pict"
    "ureProtocol.RectPicture\022\025\n\rface_show_pic"
    "\030\005 \001(\014\0223\n\rrect_pic_show\030\006 \001(\0132\034.PictureP"
    "rotocol.RectPicture\022\023\n\013camera_time\030\007 \002(\004"
    "\022\024\n\014program_time\030\010 \002(\004\022\021\n\tsend_time\030\t \002("
    "\004\022\024\n\014picture_name\030\n \002(\t\022\020\n\010back_pic\030\013 \001("
    "\014\0223\n\rrect_pic_back\030\014 \001(\0132\034.PictureProtoc"
    "ol.RectPicture\"\204\003\n\016SendCarMessage\022\021\n\tcam"
    "era_id\030\001 \002(\004\022\025\n\rlicense_score\030\002 \002(\r\022\031\n\021l"
    "icense_plate_num\030\003 \002(\t\022\033\n\023license_plate_"
    "color\030\004 \001(\t\022\031\n\021license_car_color\030\005 \001(\t\022\032"
    "\n\022license_plate_type\030\006 \001(\t\022\031\n\021license_pl"
    "ate_pic\030\007 \002(\014\0226\n\020rect_pic_license\030\010 \001(\0132"
    "\034.PictureProtocol.RectPicture\022\023\n\013camera_"
    "time\030\t \002(\004\022\024\n\014program_time\030\n \002(\004\022\024\n\014pict"
    "ure_name\030\013 \002(\t\022\020\n\010back_pic\030\014 \001(\014\0223\n\rrect"
    "_pic_back\030\r \001(\0132\034.PictureProtocol.RectPi"
    "cture\"\201\001\n\017SendBackMessage\022\021\n\tcamera_id\030\001"
    " \002(\004\022\020\n\010back_pic\030\002 \002(\014\0223\n\rrect_pic_back\030"
    "\003 \002(\0132\034.PictureProtocol.RectPicture\022\024\n\014p"
    "icture_name\030\004 \002(\t\"B\n\013RectPicture\022\t\n\001x\030\001 "
    "\002(\r\022\t\n\001y\030\002 \002(\r\022\r\n\005width\030\003 \002(\r\022\016\n\006height\030"
    "\004 \002(\r\"1\n\014CameraStatus\022\021\n\tcamera_id\030\001 \002(\004"
    "\022\016\n\006status\030\002 \002(\010\"G\n\020CameraStatusList\0223\n\014"
    "cameraStatus\030\001 \003(\0132\035.PictureProtocol.Cam"
    "eraStatus*\211\001\n\013MessageType\022\t\n\005LOGIN\020\n\022\020\n\014"
    "LOGIN_RESULT\020\013\022\025\n\021SEND_FACE_MESSAGE\020\014\022\025\n"
    "\021SEND_BACK_MESSAGE\020\r\022\024\n\020SEND_CAR_MESSAGE"
    "\020\016\022\031\n\025CAMERA_STATUS_MESSAGE\020\017B3\n com.bea"
    "rhunting.picture.protocolB\017PictureProtoc"
    "ol", 1842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SendPictureProtocol.proto", &protobuf_RegisterTypes);
  Head::default_instance_ = new Head();
  CameraMessage::default_instance_ = new CameraMessage();
  Login::default_instance_ = new Login();
  LoginResult::default_instance_ = new LoginResult();
  ChangeCamera::default_instance_ = new ChangeCamera();
  SendFaceMessage::default_instance_ = new SendFaceMessage();
  SendCarMessage::default_instance_ = new SendCarMessage();
  SendBackMessage::default_instance_ = new SendBackMessage();
  RectPicture::default_instance_ = new RectPicture();
  CameraStatus::default_instance_ = new CameraStatus();
  CameraStatusList::default_instance_ = new CameraStatusList();
  Head::default_instance_->InitAsDefaultInstance();
  CameraMessage::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  LoginResult::default_instance_->InitAsDefaultInstance();
  ChangeCamera::default_instance_->InitAsDefaultInstance();
  SendFaceMessage::default_instance_->InitAsDefaultInstance();
  SendCarMessage::default_instance_->InitAsDefaultInstance();
  SendBackMessage::default_instance_->InitAsDefaultInstance();
  RectPicture::default_instance_->InitAsDefaultInstance();
  CameraStatus::default_instance_->InitAsDefaultInstance();
  CameraStatusList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SendPictureProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SendPictureProtocol_2eproto {
  StaticDescriptorInitializer_SendPictureProtocol_2eproto() {
    protobuf_AddDesc_SendPictureProtocol_2eproto();
  }
} static_descriptor_initializer_SendPictureProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Head::kMessageSizeFieldNumber;
const int Head::kMessageTypeFieldNumber;
#endif  // !_MSC_VER

Head::Head()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.Head)
}

void Head::InitAsDefaultInstance() {
}

Head::Head(const Head& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.Head)
}

void Head::SharedCtor() {
  _cached_size_ = 0;
  message_size_ = 0u;
  message_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Head::~Head() {
  // @@protoc_insertion_point(destructor:PictureProtocol.Head)
  SharedDtor();
}

void Head::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Head_descriptor_;
}

const Head& Head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

Head* Head::default_instance_ = NULL;

Head* Head::New() const {
  return new Head;
}

void Head::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Head*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(message_size_, message_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.Head)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 message_size = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &message_size_)));
          set_has_message_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_message_type;
        break;
      }

      // required fixed32 message_type = 2;
      case 2: {
        if (tag == 21) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.Head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.Head)
  return false;
#undef DO_
}

void Head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.Head)
  // required fixed32 message_size = 1;
  if (has_message_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->message_size(), output);
  }

  // required fixed32 message_type = 2;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->message_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.Head)
}

::google::protobuf::uint8* Head::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.Head)
  // required fixed32 message_size = 1;
  if (has_message_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->message_size(), target);
  }

  // required fixed32 message_type = 2;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->message_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.Head)
  return target;
}

int Head::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 message_size = 1;
    if (has_message_size()) {
      total_size += 1 + 4;
    }

    // required fixed32 message_type = 2;
    if (has_message_type()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Head::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Head* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Head*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Head::MergeFrom(const Head& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_size()) {
      set_message_size(from.message_size());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Head::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Head::CopyFrom(const Head& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Head::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Head::Swap(Head* other) {
  if (other != this) {
    std::swap(message_size_, other->message_size_);
    std::swap(message_type_, other->message_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Head_descriptor_;
  metadata.reflection = Head_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraMessage::kCameraIdFieldNumber;
const int CameraMessage::kCameraIpFieldNumber;
const int CameraMessage::kCameraPortFieldNumber;
const int CameraMessage::kCameraUsernameFieldNumber;
const int CameraMessage::kCameraPassowrdFieldNumber;
#endif  // !_MSC_VER

CameraMessage::CameraMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.CameraMessage)
}

void CameraMessage::InitAsDefaultInstance() {
}

CameraMessage::CameraMessage(const CameraMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.CameraMessage)
}

void CameraMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  camera_id_ = GOOGLE_ULONGLONG(0);
  camera_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_port_ = 0u;
  camera_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  camera_passowrd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraMessage::~CameraMessage() {
  // @@protoc_insertion_point(destructor:PictureProtocol.CameraMessage)
  SharedDtor();
}

void CameraMessage::SharedDtor() {
  if (camera_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_ip_;
  }
  if (camera_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_username_;
  }
  if (camera_passowrd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete camera_passowrd_;
  }
  if (this != default_instance_) {
  }
}

void CameraMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraMessage_descriptor_;
}

const CameraMessage& CameraMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

CameraMessage* CameraMessage::default_instance_ = NULL;

CameraMessage* CameraMessage::New() const {
  return new CameraMessage;
}

void CameraMessage::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    camera_id_ = GOOGLE_ULONGLONG(0);
    if (has_camera_ip()) {
      if (camera_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_ip_->clear();
      }
    }
    camera_port_ = 0u;
    if (has_camera_username()) {
      if (camera_username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_username_->clear();
      }
    }
    if (has_camera_passowrd()) {
      if (camera_passowrd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        camera_passowrd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.CameraMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 camera_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_ip;
        break;
      }

      // required string camera_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_ip().data(), this->camera_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_camera_port;
        break;
      }

      // required uint32 camera_port = 3;
      case 3: {
        if (tag == 24) {
         parse_camera_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_port_)));
          set_has_camera_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_camera_username;
        break;
      }

      // required string camera_username = 4;
      case 4: {
        if (tag == 34) {
         parse_camera_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_username().data(), this->camera_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_camera_passowrd;
        break;
      }

      // required string camera_passowrd = 5;
      case 5: {
        if (tag == 42) {
         parse_camera_passowrd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_passowrd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_passowrd().data(), this->camera_passowrd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "camera_passowrd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.CameraMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.CameraMessage)
  return false;
#undef DO_
}

void CameraMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.CameraMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->camera_id(), output);
  }

  // required string camera_ip = 2;
  if (has_camera_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_ip().data(), this->camera_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->camera_ip(), output);
  }

  // required uint32 camera_port = 3;
  if (has_camera_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->camera_port(), output);
  }

  // required string camera_username = 4;
  if (has_camera_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_username().data(), this->camera_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->camera_username(), output);
  }

  // required string camera_passowrd = 5;
  if (has_camera_passowrd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_passowrd().data(), this->camera_passowrd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_passowrd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->camera_passowrd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.CameraMessage)
}

::google::protobuf::uint8* CameraMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.CameraMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->camera_id(), target);
  }

  // required string camera_ip = 2;
  if (has_camera_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_ip().data(), this->camera_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->camera_ip(), target);
  }

  // required uint32 camera_port = 3;
  if (has_camera_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->camera_port(), target);
  }

  // required string camera_username = 4;
  if (has_camera_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_username().data(), this->camera_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->camera_username(), target);
  }

  // required string camera_passowrd = 5;
  if (has_camera_passowrd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_passowrd().data(), this->camera_passowrd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "camera_passowrd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->camera_passowrd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.CameraMessage)
  return target;
}

int CameraMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 camera_id = 1;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_id());
    }

    // required string camera_ip = 2;
    if (has_camera_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_ip());
    }

    // required uint32 camera_port = 3;
    if (has_camera_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_port());
    }

    // required string camera_username = 4;
    if (has_camera_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_username());
    }

    // required string camera_passowrd = 5;
    if (has_camera_passowrd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_passowrd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraMessage::MergeFrom(const CameraMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_camera_ip()) {
      set_camera_ip(from.camera_ip());
    }
    if (from.has_camera_port()) {
      set_camera_port(from.camera_port());
    }
    if (from.has_camera_username()) {
      set_camera_username(from.camera_username());
    }
    if (from.has_camera_passowrd()) {
      set_camera_passowrd(from.camera_passowrd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraMessage::CopyFrom(const CameraMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CameraMessage::Swap(CameraMessage* other) {
  if (other != this) {
    std::swap(camera_id_, other->camera_id_);
    std::swap(camera_ip_, other->camera_ip_);
    std::swap(camera_port_, other->camera_port_);
    std::swap(camera_username_, other->camera_username_);
    std::swap(camera_passowrd_, other->camera_passowrd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraMessage_descriptor_;
  metadata.reflection = CameraMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kIdFieldNumber;
const int Login::kUsernameFieldNumber;
const int Login::kPasswordFieldNumber;
const int Login::kVersionFieldNumber;
const int Login::kOsFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.Login)
}

void Login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:PictureProtocol.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    version_ = 0u;
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // required string username = 2;
      case 2: {
        if (tag == 18) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // required uint32 version = 4;
      case 4: {
        if (tag == 32) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_os;
        break;
      }

      // required string os = 5;
      case 5: {
        if (tag == 42) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.Login)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // required uint32 version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->version(), output);
  }

  // required string os = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->os(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.Login)
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.Login)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required uint32 version = 4;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->version(), target);
  }

  // required string os = 5;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->os(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint32 version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required string os = 5;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(version_, other->version_);
    std::swap(os_, other->os_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginResult_Flag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_Flag_descriptor_;
}
bool LoginResult_Flag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginResult_Flag LoginResult::ok;
const LoginResult_Flag LoginResult::fail;
const LoginResult_Flag LoginResult::update_version;
const LoginResult_Flag LoginResult::Flag_MIN;
const LoginResult_Flag LoginResult::Flag_MAX;
const int LoginResult::Flag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginResult::kFlagFieldNumber;
const int LoginResult::kCameraMessageFieldNumber;
const int LoginResult::kMessageFieldNumber;
#endif  // !_MSC_VER

LoginResult::LoginResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.LoginResult)
}

void LoginResult::InitAsDefaultInstance() {
}

LoginResult::LoginResult(const LoginResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.LoginResult)
}

void LoginResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 1;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResult::~LoginResult() {
  // @@protoc_insertion_point(destructor:PictureProtocol.LoginResult)
  SharedDtor();
}

void LoginResult::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void LoginResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResult_descriptor_;
}

const LoginResult& LoginResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

LoginResult* LoginResult::default_instance_ = NULL;

LoginResult* LoginResult::New() const {
  return new LoginResult;
}

void LoginResult::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    flag_ = 1;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  camera_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.LoginResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PictureProtocol.LoginResult.Flag flag = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PictureProtocol::LoginResult_Flag_IsValid(value)) {
            set_flag(static_cast< ::PictureProtocol::LoginResult_Flag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_message;
        break;
      }

      // repeated .PictureProtocol.CameraMessage camera_message = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_message;
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.LoginResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.LoginResult)
  return false;
#undef DO_
}

void LoginResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.LoginResult)
  // required .PictureProtocol.LoginResult.Flag flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flag(), output);
  }

  // repeated .PictureProtocol.CameraMessage camera_message = 2;
  for (int i = 0; i < this->camera_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camera_message(i), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.LoginResult)
}

::google::protobuf::uint8* LoginResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.LoginResult)
  // required .PictureProtocol.LoginResult.Flag flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->flag(), target);
  }

  // repeated .PictureProtocol.CameraMessage camera_message = 2;
  for (int i = 0; i < this->camera_message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camera_message(i), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.LoginResult)
  return target;
}

int LoginResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PictureProtocol.LoginResult.Flag flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .PictureProtocol.CameraMessage camera_message = 2;
  total_size += 1 * this->camera_message_size();
  for (int i = 0; i < this->camera_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResult::MergeFrom(const LoginResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  camera_message_.MergeFrom(from.camera_message_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResult::CopyFrom(const LoginResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->camera_message())) return false;
  return true;
}

void LoginResult::Swap(LoginResult* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    camera_message_.Swap(&other->camera_message_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResult_descriptor_;
  metadata.reflection = LoginResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeCamera::kCameraMessageFieldNumber;
#endif  // !_MSC_VER

ChangeCamera::ChangeCamera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.ChangeCamera)
}

void ChangeCamera::InitAsDefaultInstance() {
}

ChangeCamera::ChangeCamera(const ChangeCamera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.ChangeCamera)
}

void ChangeCamera::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeCamera::~ChangeCamera() {
  // @@protoc_insertion_point(destructor:PictureProtocol.ChangeCamera)
  SharedDtor();
}

void ChangeCamera::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeCamera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeCamera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeCamera_descriptor_;
}

const ChangeCamera& ChangeCamera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

ChangeCamera* ChangeCamera::default_instance_ = NULL;

ChangeCamera* ChangeCamera::New() const {
  return new ChangeCamera;
}

void ChangeCamera::Clear() {
  camera_message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeCamera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.ChangeCamera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PictureProtocol.CameraMessage camera_message = 1;
      case 1: {
        if (tag == 10) {
         parse_camera_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_camera_message;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.ChangeCamera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.ChangeCamera)
  return false;
#undef DO_
}

void ChangeCamera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.ChangeCamera)
  // repeated .PictureProtocol.CameraMessage camera_message = 1;
  for (int i = 0; i < this->camera_message_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camera_message(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.ChangeCamera)
}

::google::protobuf::uint8* ChangeCamera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.ChangeCamera)
  // repeated .PictureProtocol.CameraMessage camera_message = 1;
  for (int i = 0; i < this->camera_message_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camera_message(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.ChangeCamera)
  return target;
}

int ChangeCamera::ByteSize() const {
  int total_size = 0;

  // repeated .PictureProtocol.CameraMessage camera_message = 1;
  total_size += 1 * this->camera_message_size();
  for (int i = 0; i < this->camera_message_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeCamera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeCamera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeCamera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeCamera::MergeFrom(const ChangeCamera& from) {
  GOOGLE_CHECK_NE(&from, this);
  camera_message_.MergeFrom(from.camera_message_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeCamera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeCamera::CopyFrom(const ChangeCamera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeCamera::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->camera_message())) return false;
  return true;
}

void ChangeCamera::Swap(ChangeCamera* other) {
  if (other != this) {
    camera_message_.Swap(&other->camera_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeCamera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeCamera_descriptor_;
  metadata.reflection = ChangeCamera_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFaceMessage::kCameraIdFieldNumber;
const int SendFaceMessage::kFaceScoreFieldNumber;
const int SendFaceMessage::kFaceContrastPicFieldNumber;
const int SendFaceMessage::kRectPicFaceFieldNumber;
const int SendFaceMessage::kFaceShowPicFieldNumber;
const int SendFaceMessage::kRectPicShowFieldNumber;
const int SendFaceMessage::kCameraTimeFieldNumber;
const int SendFaceMessage::kProgramTimeFieldNumber;
const int SendFaceMessage::kSendTimeFieldNumber;
const int SendFaceMessage::kPictureNameFieldNumber;
const int SendFaceMessage::kBackPicFieldNumber;
const int SendFaceMessage::kRectPicBackFieldNumber;
#endif  // !_MSC_VER

SendFaceMessage::SendFaceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.SendFaceMessage)
}

void SendFaceMessage::InitAsDefaultInstance() {
  rect_pic_face_ = const_cast< ::PictureProtocol::RectPicture*>(&::PictureProtocol::RectPicture::default_instance());
  rect_pic_show_ = const_cast< ::PictureProtocol::RectPicture*>(&::PictureProtocol::RectPicture::default_instance());
  rect_pic_back_ = const_cast< ::PictureProtocol::RectPicture*>(&::PictureProtocol::RectPicture::default_instance());
}

SendFaceMessage::SendFaceMessage(const SendFaceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.SendFaceMessage)
}

void SendFaceMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  camera_id_ = GOOGLE_ULONGLONG(0);
  face_score_ = 0u;
  face_contrast_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rect_pic_face_ = NULL;
  face_show_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rect_pic_show_ = NULL;
  camera_time_ = GOOGLE_ULONGLONG(0);
  program_time_ = GOOGLE_ULONGLONG(0);
  send_time_ = GOOGLE_ULONGLONG(0);
  picture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  back_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rect_pic_back_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFaceMessage::~SendFaceMessage() {
  // @@protoc_insertion_point(destructor:PictureProtocol.SendFaceMessage)
  SharedDtor();
}

void SendFaceMessage::SharedDtor() {
  if (face_contrast_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete face_contrast_pic_;
  }
  if (face_show_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete face_show_pic_;
  }
  if (picture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture_name_;
  }
  if (back_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete back_pic_;
  }
  if (this != default_instance_) {
    delete rect_pic_face_;
    delete rect_pic_show_;
    delete rect_pic_back_;
  }
}

void SendFaceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFaceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFaceMessage_descriptor_;
}

const SendFaceMessage& SendFaceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

SendFaceMessage* SendFaceMessage::default_instance_ = NULL;

SendFaceMessage* SendFaceMessage::New() const {
  return new SendFaceMessage;
}

void SendFaceMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendFaceMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(camera_time_, program_time_);
    camera_id_ = GOOGLE_ULONGLONG(0);
    face_score_ = 0u;
    if (has_face_contrast_pic()) {
      if (face_contrast_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        face_contrast_pic_->clear();
      }
    }
    if (has_rect_pic_face()) {
      if (rect_pic_face_ != NULL) rect_pic_face_->::PictureProtocol::RectPicture::Clear();
    }
    if (has_face_show_pic()) {
      if (face_show_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        face_show_pic_->clear();
      }
    }
    if (has_rect_pic_show()) {
      if (rect_pic_show_ != NULL) rect_pic_show_->::PictureProtocol::RectPicture::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    send_time_ = GOOGLE_ULONGLONG(0);
    if (has_picture_name()) {
      if (picture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picture_name_->clear();
      }
    }
    if (has_back_pic()) {
      if (back_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        back_pic_->clear();
      }
    }
    if (has_rect_pic_back()) {
      if (rect_pic_back_ != NULL) rect_pic_back_->::PictureProtocol::RectPicture::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFaceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.SendFaceMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 camera_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_face_score;
        break;
      }

      // required uint32 face_score = 2;
      case 2: {
        if (tag == 16) {
         parse_face_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_score_)));
          set_has_face_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_face_contrast_pic;
        break;
      }

      // required bytes face_contrast_pic = 3;
      case 3: {
        if (tag == 26) {
         parse_face_contrast_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face_contrast_pic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rect_pic_face;
        break;
      }

      // optional .PictureProtocol.RectPicture rect_pic_face = 4;
      case 4: {
        if (tag == 34) {
         parse_rect_pic_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_pic_face()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_face_show_pic;
        break;
      }

      // optional bytes face_show_pic = 5;
      case 5: {
        if (tag == 42) {
         parse_face_show_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face_show_pic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rect_pic_show;
        break;
      }

      // optional .PictureProtocol.RectPicture rect_pic_show = 6;
      case 6: {
        if (tag == 50) {
         parse_rect_pic_show:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_pic_show()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_camera_time;
        break;
      }

      // required uint64 camera_time = 7;
      case 7: {
        if (tag == 56) {
         parse_camera_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_time_)));
          set_has_camera_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_program_time;
        break;
      }

      // required uint64 program_time = 8;
      case 8: {
        if (tag == 64) {
         parse_program_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &program_time_)));
          set_has_program_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_send_time;
        break;
      }

      // required uint64 send_time = 9;
      case 9: {
        if (tag == 72) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_picture_name;
        break;
      }

      // required string picture_name = 10;
      case 10: {
        if (tag == 82) {
         parse_picture_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picture_name().data(), this->picture_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "picture_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_back_pic;
        break;
      }

      // optional bytes back_pic = 11;
      case 11: {
        if (tag == 90) {
         parse_back_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_back_pic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rect_pic_back;
        break;
      }

      // optional .PictureProtocol.RectPicture rect_pic_back = 12;
      case 12: {
        if (tag == 98) {
         parse_rect_pic_back:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_pic_back()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.SendFaceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.SendFaceMessage)
  return false;
#undef DO_
}

void SendFaceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.SendFaceMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->camera_id(), output);
  }

  // required uint32 face_score = 2;
  if (has_face_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->face_score(), output);
  }

  // required bytes face_contrast_pic = 3;
  if (has_face_contrast_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->face_contrast_pic(), output);
  }

  // optional .PictureProtocol.RectPicture rect_pic_face = 4;
  if (has_rect_pic_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rect_pic_face(), output);
  }

  // optional bytes face_show_pic = 5;
  if (has_face_show_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->face_show_pic(), output);
  }

  // optional .PictureProtocol.RectPicture rect_pic_show = 6;
  if (has_rect_pic_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rect_pic_show(), output);
  }

  // required uint64 camera_time = 7;
  if (has_camera_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->camera_time(), output);
  }

  // required uint64 program_time = 8;
  if (has_program_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->program_time(), output);
  }

  // required uint64 send_time = 9;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->send_time(), output);
  }

  // required string picture_name = 10;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->picture_name(), output);
  }

  // optional bytes back_pic = 11;
  if (has_back_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->back_pic(), output);
  }

  // optional .PictureProtocol.RectPicture rect_pic_back = 12;
  if (has_rect_pic_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->rect_pic_back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.SendFaceMessage)
}

::google::protobuf::uint8* SendFaceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.SendFaceMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->camera_id(), target);
  }

  // required uint32 face_score = 2;
  if (has_face_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->face_score(), target);
  }

  // required bytes face_contrast_pic = 3;
  if (has_face_contrast_pic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->face_contrast_pic(), target);
  }

  // optional .PictureProtocol.RectPicture rect_pic_face = 4;
  if (has_rect_pic_face()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rect_pic_face(), target);
  }

  // optional bytes face_show_pic = 5;
  if (has_face_show_pic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->face_show_pic(), target);
  }

  // optional .PictureProtocol.RectPicture rect_pic_show = 6;
  if (has_rect_pic_show()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rect_pic_show(), target);
  }

  // required uint64 camera_time = 7;
  if (has_camera_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->camera_time(), target);
  }

  // required uint64 program_time = 8;
  if (has_program_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->program_time(), target);
  }

  // required uint64 send_time = 9;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->send_time(), target);
  }

  // required string picture_name = 10;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->picture_name(), target);
  }

  // optional bytes back_pic = 11;
  if (has_back_pic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->back_pic(), target);
  }

  // optional .PictureProtocol.RectPicture rect_pic_back = 12;
  if (has_rect_pic_back()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->rect_pic_back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.SendFaceMessage)
  return target;
}

int SendFaceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 camera_id = 1;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_id());
    }

    // required uint32 face_score = 2;
    if (has_face_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->face_score());
    }

    // required bytes face_contrast_pic = 3;
    if (has_face_contrast_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->face_contrast_pic());
    }

    // optional .PictureProtocol.RectPicture rect_pic_face = 4;
    if (has_rect_pic_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_pic_face());
    }

    // optional bytes face_show_pic = 5;
    if (has_face_show_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->face_show_pic());
    }

    // optional .PictureProtocol.RectPicture rect_pic_show = 6;
    if (has_rect_pic_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_pic_show());
    }

    // required uint64 camera_time = 7;
    if (has_camera_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_time());
    }

    // required uint64 program_time = 8;
    if (has_program_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->program_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 send_time = 9;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_time());
    }

    // required string picture_name = 10;
    if (has_picture_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_name());
    }

    // optional bytes back_pic = 11;
    if (has_back_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->back_pic());
    }

    // optional .PictureProtocol.RectPicture rect_pic_back = 12;
    if (has_rect_pic_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_pic_back());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFaceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFaceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFaceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFaceMessage::MergeFrom(const SendFaceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_face_score()) {
      set_face_score(from.face_score());
    }
    if (from.has_face_contrast_pic()) {
      set_face_contrast_pic(from.face_contrast_pic());
    }
    if (from.has_rect_pic_face()) {
      mutable_rect_pic_face()->::PictureProtocol::RectPicture::MergeFrom(from.rect_pic_face());
    }
    if (from.has_face_show_pic()) {
      set_face_show_pic(from.face_show_pic());
    }
    if (from.has_rect_pic_show()) {
      mutable_rect_pic_show()->::PictureProtocol::RectPicture::MergeFrom(from.rect_pic_show());
    }
    if (from.has_camera_time()) {
      set_camera_time(from.camera_time());
    }
    if (from.has_program_time()) {
      set_program_time(from.program_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
    if (from.has_picture_name()) {
      set_picture_name(from.picture_name());
    }
    if (from.has_back_pic()) {
      set_back_pic(from.back_pic());
    }
    if (from.has_rect_pic_back()) {
      mutable_rect_pic_back()->::PictureProtocol::RectPicture::MergeFrom(from.rect_pic_back());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFaceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFaceMessage::CopyFrom(const SendFaceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFaceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003c7) != 0x000003c7) return false;

  if (has_rect_pic_face()) {
    if (!this->rect_pic_face().IsInitialized()) return false;
  }
  if (has_rect_pic_show()) {
    if (!this->rect_pic_show().IsInitialized()) return false;
  }
  if (has_rect_pic_back()) {
    if (!this->rect_pic_back().IsInitialized()) return false;
  }
  return true;
}

void SendFaceMessage::Swap(SendFaceMessage* other) {
  if (other != this) {
    std::swap(camera_id_, other->camera_id_);
    std::swap(face_score_, other->face_score_);
    std::swap(face_contrast_pic_, other->face_contrast_pic_);
    std::swap(rect_pic_face_, other->rect_pic_face_);
    std::swap(face_show_pic_, other->face_show_pic_);
    std::swap(rect_pic_show_, other->rect_pic_show_);
    std::swap(camera_time_, other->camera_time_);
    std::swap(program_time_, other->program_time_);
    std::swap(send_time_, other->send_time_);
    std::swap(picture_name_, other->picture_name_);
    std::swap(back_pic_, other->back_pic_);
    std::swap(rect_pic_back_, other->rect_pic_back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFaceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFaceMessage_descriptor_;
  metadata.reflection = SendFaceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendCarMessage::kCameraIdFieldNumber;
const int SendCarMessage::kLicenseScoreFieldNumber;
const int SendCarMessage::kLicensePlateNumFieldNumber;
const int SendCarMessage::kLicensePlateColorFieldNumber;
const int SendCarMessage::kLicenseCarColorFieldNumber;
const int SendCarMessage::kLicensePlateTypeFieldNumber;
const int SendCarMessage::kLicensePlatePicFieldNumber;
const int SendCarMessage::kRectPicLicenseFieldNumber;
const int SendCarMessage::kCameraTimeFieldNumber;
const int SendCarMessage::kProgramTimeFieldNumber;
const int SendCarMessage::kPictureNameFieldNumber;
const int SendCarMessage::kBackPicFieldNumber;
const int SendCarMessage::kRectPicBackFieldNumber;
#endif  // !_MSC_VER

SendCarMessage::SendCarMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.SendCarMessage)
}

void SendCarMessage::InitAsDefaultInstance() {
  rect_pic_license_ = const_cast< ::PictureProtocol::RectPicture*>(&::PictureProtocol::RectPicture::default_instance());
  rect_pic_back_ = const_cast< ::PictureProtocol::RectPicture*>(&::PictureProtocol::RectPicture::default_instance());
}

SendCarMessage::SendCarMessage(const SendCarMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.SendCarMessage)
}

void SendCarMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  camera_id_ = GOOGLE_ULONGLONG(0);
  license_score_ = 0u;
  license_plate_num_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_car_color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  license_plate_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rect_pic_license_ = NULL;
  camera_time_ = GOOGLE_ULONGLONG(0);
  program_time_ = GOOGLE_ULONGLONG(0);
  picture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  back_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rect_pic_back_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendCarMessage::~SendCarMessage() {
  // @@protoc_insertion_point(destructor:PictureProtocol.SendCarMessage)
  SharedDtor();
}

void SendCarMessage::SharedDtor() {
  if (license_plate_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete license_plate_num_;
  }
  if (license_plate_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete license_plate_color_;
  }
  if (license_car_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete license_car_color_;
  }
  if (license_plate_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete license_plate_type_;
  }
  if (license_plate_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete license_plate_pic_;
  }
  if (picture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture_name_;
  }
  if (back_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete back_pic_;
  }
  if (this != default_instance_) {
    delete rect_pic_license_;
    delete rect_pic_back_;
  }
}

void SendCarMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendCarMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendCarMessage_descriptor_;
}

const SendCarMessage& SendCarMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

SendCarMessage* SendCarMessage::default_instance_ = NULL;

SendCarMessage* SendCarMessage::New() const {
  return new SendCarMessage;
}

void SendCarMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendCarMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    camera_id_ = GOOGLE_ULONGLONG(0);
    license_score_ = 0u;
    if (has_license_plate_num()) {
      if (license_plate_num_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        license_plate_num_->clear();
      }
    }
    if (has_license_plate_color()) {
      if (license_plate_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        license_plate_color_->clear();
      }
    }
    if (has_license_car_color()) {
      if (license_car_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        license_car_color_->clear();
      }
    }
    if (has_license_plate_type()) {
      if (license_plate_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        license_plate_type_->clear();
      }
    }
    if (has_license_plate_pic()) {
      if (license_plate_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        license_plate_pic_->clear();
      }
    }
    if (has_rect_pic_license()) {
      if (rect_pic_license_ != NULL) rect_pic_license_->::PictureProtocol::RectPicture::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(camera_time_, program_time_);
    if (has_picture_name()) {
      if (picture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picture_name_->clear();
      }
    }
    if (has_back_pic()) {
      if (back_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        back_pic_->clear();
      }
    }
    if (has_rect_pic_back()) {
      if (rect_pic_back_ != NULL) rect_pic_back_->::PictureProtocol::RectPicture::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendCarMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.SendCarMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 camera_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_license_score;
        break;
      }

      // required uint32 license_score = 2;
      case 2: {
        if (tag == 16) {
         parse_license_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &license_score_)));
          set_has_license_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_license_plate_num;
        break;
      }

      // required string license_plate_num = 3;
      case 3: {
        if (tag == 26) {
         parse_license_plate_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_plate_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license_plate_num().data(), this->license_plate_num().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "license_plate_num");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_license_plate_color;
        break;
      }

      // optional string license_plate_color = 4;
      case 4: {
        if (tag == 34) {
         parse_license_plate_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_plate_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license_plate_color().data(), this->license_plate_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "license_plate_color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_license_car_color;
        break;
      }

      // optional string license_car_color = 5;
      case 5: {
        if (tag == 42) {
         parse_license_car_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_car_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license_car_color().data(), this->license_car_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "license_car_color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_license_plate_type;
        break;
      }

      // optional string license_plate_type = 6;
      case 6: {
        if (tag == 50) {
         parse_license_plate_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_license_plate_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->license_plate_type().data(), this->license_plate_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "license_plate_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_license_plate_pic;
        break;
      }

      // required bytes license_plate_pic = 7;
      case 7: {
        if (tag == 58) {
         parse_license_plate_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_license_plate_pic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rect_pic_license;
        break;
      }

      // optional .PictureProtocol.RectPicture rect_pic_license = 8;
      case 8: {
        if (tag == 66) {
         parse_rect_pic_license:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_pic_license()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_camera_time;
        break;
      }

      // required uint64 camera_time = 9;
      case 9: {
        if (tag == 72) {
         parse_camera_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_time_)));
          set_has_camera_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_program_time;
        break;
      }

      // required uint64 program_time = 10;
      case 10: {
        if (tag == 80) {
         parse_program_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &program_time_)));
          set_has_program_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_picture_name;
        break;
      }

      // required string picture_name = 11;
      case 11: {
        if (tag == 90) {
         parse_picture_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picture_name().data(), this->picture_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "picture_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_back_pic;
        break;
      }

      // optional bytes back_pic = 12;
      case 12: {
        if (tag == 98) {
         parse_back_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_back_pic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_rect_pic_back;
        break;
      }

      // optional .PictureProtocol.RectPicture rect_pic_back = 13;
      case 13: {
        if (tag == 106) {
         parse_rect_pic_back:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_pic_back()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.SendCarMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.SendCarMessage)
  return false;
#undef DO_
}

void SendCarMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.SendCarMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->camera_id(), output);
  }

  // required uint32 license_score = 2;
  if (has_license_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->license_score(), output);
  }

  // required string license_plate_num = 3;
  if (has_license_plate_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate_num().data(), this->license_plate_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_plate_num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->license_plate_num(), output);
  }

  // optional string license_plate_color = 4;
  if (has_license_plate_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate_color().data(), this->license_plate_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_plate_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->license_plate_color(), output);
  }

  // optional string license_car_color = 5;
  if (has_license_car_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_car_color().data(), this->license_car_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_car_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->license_car_color(), output);
  }

  // optional string license_plate_type = 6;
  if (has_license_plate_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate_type().data(), this->license_plate_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_plate_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->license_plate_type(), output);
  }

  // required bytes license_plate_pic = 7;
  if (has_license_plate_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->license_plate_pic(), output);
  }

  // optional .PictureProtocol.RectPicture rect_pic_license = 8;
  if (has_rect_pic_license()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rect_pic_license(), output);
  }

  // required uint64 camera_time = 9;
  if (has_camera_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->camera_time(), output);
  }

  // required uint64 program_time = 10;
  if (has_program_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->program_time(), output);
  }

  // required string picture_name = 11;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->picture_name(), output);
  }

  // optional bytes back_pic = 12;
  if (has_back_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->back_pic(), output);
  }

  // optional .PictureProtocol.RectPicture rect_pic_back = 13;
  if (has_rect_pic_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rect_pic_back(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.SendCarMessage)
}

::google::protobuf::uint8* SendCarMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.SendCarMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->camera_id(), target);
  }

  // required uint32 license_score = 2;
  if (has_license_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->license_score(), target);
  }

  // required string license_plate_num = 3;
  if (has_license_plate_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate_num().data(), this->license_plate_num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_plate_num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->license_plate_num(), target);
  }

  // optional string license_plate_color = 4;
  if (has_license_plate_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate_color().data(), this->license_plate_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_plate_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->license_plate_color(), target);
  }

  // optional string license_car_color = 5;
  if (has_license_car_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_car_color().data(), this->license_car_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_car_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->license_car_color(), target);
  }

  // optional string license_plate_type = 6;
  if (has_license_plate_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->license_plate_type().data(), this->license_plate_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "license_plate_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->license_plate_type(), target);
  }

  // required bytes license_plate_pic = 7;
  if (has_license_plate_pic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->license_plate_pic(), target);
  }

  // optional .PictureProtocol.RectPicture rect_pic_license = 8;
  if (has_rect_pic_license()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rect_pic_license(), target);
  }

  // required uint64 camera_time = 9;
  if (has_camera_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->camera_time(), target);
  }

  // required uint64 program_time = 10;
  if (has_program_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->program_time(), target);
  }

  // required string picture_name = 11;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->picture_name(), target);
  }

  // optional bytes back_pic = 12;
  if (has_back_pic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->back_pic(), target);
  }

  // optional .PictureProtocol.RectPicture rect_pic_back = 13;
  if (has_rect_pic_back()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->rect_pic_back(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.SendCarMessage)
  return target;
}

int SendCarMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 camera_id = 1;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_id());
    }

    // required uint32 license_score = 2;
    if (has_license_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->license_score());
    }

    // required string license_plate_num = 3;
    if (has_license_plate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_plate_num());
    }

    // optional string license_plate_color = 4;
    if (has_license_plate_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_plate_color());
    }

    // optional string license_car_color = 5;
    if (has_license_car_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_car_color());
    }

    // optional string license_plate_type = 6;
    if (has_license_plate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->license_plate_type());
    }

    // required bytes license_plate_pic = 7;
    if (has_license_plate_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->license_plate_pic());
    }

    // optional .PictureProtocol.RectPicture rect_pic_license = 8;
    if (has_rect_pic_license()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_pic_license());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 camera_time = 9;
    if (has_camera_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_time());
    }

    // required uint64 program_time = 10;
    if (has_program_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->program_time());
    }

    // required string picture_name = 11;
    if (has_picture_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_name());
    }

    // optional bytes back_pic = 12;
    if (has_back_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->back_pic());
    }

    // optional .PictureProtocol.RectPicture rect_pic_back = 13;
    if (has_rect_pic_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_pic_back());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCarMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendCarMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendCarMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendCarMessage::MergeFrom(const SendCarMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_license_score()) {
      set_license_score(from.license_score());
    }
    if (from.has_license_plate_num()) {
      set_license_plate_num(from.license_plate_num());
    }
    if (from.has_license_plate_color()) {
      set_license_plate_color(from.license_plate_color());
    }
    if (from.has_license_car_color()) {
      set_license_car_color(from.license_car_color());
    }
    if (from.has_license_plate_type()) {
      set_license_plate_type(from.license_plate_type());
    }
    if (from.has_license_plate_pic()) {
      set_license_plate_pic(from.license_plate_pic());
    }
    if (from.has_rect_pic_license()) {
      mutable_rect_pic_license()->::PictureProtocol::RectPicture::MergeFrom(from.rect_pic_license());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_camera_time()) {
      set_camera_time(from.camera_time());
    }
    if (from.has_program_time()) {
      set_program_time(from.program_time());
    }
    if (from.has_picture_name()) {
      set_picture_name(from.picture_name());
    }
    if (from.has_back_pic()) {
      set_back_pic(from.back_pic());
    }
    if (from.has_rect_pic_back()) {
      mutable_rect_pic_back()->::PictureProtocol::RectPicture::MergeFrom(from.rect_pic_back());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendCarMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCarMessage::CopyFrom(const SendCarMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCarMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000747) != 0x00000747) return false;

  if (has_rect_pic_license()) {
    if (!this->rect_pic_license().IsInitialized()) return false;
  }
  if (has_rect_pic_back()) {
    if (!this->rect_pic_back().IsInitialized()) return false;
  }
  return true;
}

void SendCarMessage::Swap(SendCarMessage* other) {
  if (other != this) {
    std::swap(camera_id_, other->camera_id_);
    std::swap(license_score_, other->license_score_);
    std::swap(license_plate_num_, other->license_plate_num_);
    std::swap(license_plate_color_, other->license_plate_color_);
    std::swap(license_car_color_, other->license_car_color_);
    std::swap(license_plate_type_, other->license_plate_type_);
    std::swap(license_plate_pic_, other->license_plate_pic_);
    std::swap(rect_pic_license_, other->rect_pic_license_);
    std::swap(camera_time_, other->camera_time_);
    std::swap(program_time_, other->program_time_);
    std::swap(picture_name_, other->picture_name_);
    std::swap(back_pic_, other->back_pic_);
    std::swap(rect_pic_back_, other->rect_pic_back_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendCarMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendCarMessage_descriptor_;
  metadata.reflection = SendCarMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBackMessage::kCameraIdFieldNumber;
const int SendBackMessage::kBackPicFieldNumber;
const int SendBackMessage::kRectPicBackFieldNumber;
const int SendBackMessage::kPictureNameFieldNumber;
#endif  // !_MSC_VER

SendBackMessage::SendBackMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.SendBackMessage)
}

void SendBackMessage::InitAsDefaultInstance() {
  rect_pic_back_ = const_cast< ::PictureProtocol::RectPicture*>(&::PictureProtocol::RectPicture::default_instance());
}

SendBackMessage::SendBackMessage(const SendBackMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.SendBackMessage)
}

void SendBackMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  camera_id_ = GOOGLE_ULONGLONG(0);
  back_pic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rect_pic_back_ = NULL;
  picture_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBackMessage::~SendBackMessage() {
  // @@protoc_insertion_point(destructor:PictureProtocol.SendBackMessage)
  SharedDtor();
}

void SendBackMessage::SharedDtor() {
  if (back_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete back_pic_;
  }
  if (picture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture_name_;
  }
  if (this != default_instance_) {
    delete rect_pic_back_;
  }
}

void SendBackMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBackMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBackMessage_descriptor_;
}

const SendBackMessage& SendBackMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

SendBackMessage* SendBackMessage::default_instance_ = NULL;

SendBackMessage* SendBackMessage::New() const {
  return new SendBackMessage;
}

void SendBackMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    camera_id_ = GOOGLE_ULONGLONG(0);
    if (has_back_pic()) {
      if (back_pic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        back_pic_->clear();
      }
    }
    if (has_rect_pic_back()) {
      if (rect_pic_back_ != NULL) rect_pic_back_->::PictureProtocol::RectPicture::Clear();
    }
    if (has_picture_name()) {
      if (picture_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picture_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBackMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.SendBackMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 camera_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_back_pic;
        break;
      }

      // required bytes back_pic = 2;
      case 2: {
        if (tag == 18) {
         parse_back_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_back_pic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rect_pic_back;
        break;
      }

      // required .PictureProtocol.RectPicture rect_pic_back = 3;
      case 3: {
        if (tag == 26) {
         parse_rect_pic_back:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rect_pic_back()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_picture_name;
        break;
      }

      // required string picture_name = 4;
      case 4: {
        if (tag == 34) {
         parse_picture_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picture_name().data(), this->picture_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "picture_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.SendBackMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.SendBackMessage)
  return false;
#undef DO_
}

void SendBackMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.SendBackMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->camera_id(), output);
  }

  // required bytes back_pic = 2;
  if (has_back_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->back_pic(), output);
  }

  // required .PictureProtocol.RectPicture rect_pic_back = 3;
  if (has_rect_pic_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rect_pic_back(), output);
  }

  // required string picture_name = 4;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->picture_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.SendBackMessage)
}

::google::protobuf::uint8* SendBackMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.SendBackMessage)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->camera_id(), target);
  }

  // required bytes back_pic = 2;
  if (has_back_pic()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->back_pic(), target);
  }

  // required .PictureProtocol.RectPicture rect_pic_back = 3;
  if (has_rect_pic_back()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rect_pic_back(), target);
  }

  // required string picture_name = 4;
  if (has_picture_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture_name().data(), this->picture_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->picture_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.SendBackMessage)
  return target;
}

int SendBackMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 camera_id = 1;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_id());
    }

    // required bytes back_pic = 2;
    if (has_back_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->back_pic());
    }

    // required .PictureProtocol.RectPicture rect_pic_back = 3;
    if (has_rect_pic_back()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rect_pic_back());
    }

    // required string picture_name = 4;
    if (has_picture_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBackMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBackMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBackMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBackMessage::MergeFrom(const SendBackMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_back_pic()) {
      set_back_pic(from.back_pic());
    }
    if (from.has_rect_pic_back()) {
      mutable_rect_pic_back()->::PictureProtocol::RectPicture::MergeFrom(from.rect_pic_back());
    }
    if (from.has_picture_name()) {
      set_picture_name(from.picture_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBackMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBackMessage::CopyFrom(const SendBackMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBackMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_rect_pic_back()) {
    if (!this->rect_pic_back().IsInitialized()) return false;
  }
  return true;
}

void SendBackMessage::Swap(SendBackMessage* other) {
  if (other != this) {
    std::swap(camera_id_, other->camera_id_);
    std::swap(back_pic_, other->back_pic_);
    std::swap(rect_pic_back_, other->rect_pic_back_);
    std::swap(picture_name_, other->picture_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBackMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBackMessage_descriptor_;
  metadata.reflection = SendBackMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RectPicture::kXFieldNumber;
const int RectPicture::kYFieldNumber;
const int RectPicture::kWidthFieldNumber;
const int RectPicture::kHeightFieldNumber;
#endif  // !_MSC_VER

RectPicture::RectPicture()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.RectPicture)
}

void RectPicture::InitAsDefaultInstance() {
}

RectPicture::RectPicture(const RectPicture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.RectPicture)
}

void RectPicture::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RectPicture::~RectPicture() {
  // @@protoc_insertion_point(destructor:PictureProtocol.RectPicture)
  SharedDtor();
}

void RectPicture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RectPicture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectPicture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectPicture_descriptor_;
}

const RectPicture& RectPicture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

RectPicture* RectPicture::default_instance_ = NULL;

RectPicture* RectPicture::New() const {
  return new RectPicture;
}

void RectPicture::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RectPicture*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RectPicture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.RectPicture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required uint32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // required uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.RectPicture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.RectPicture)
  return false;
#undef DO_
}

void RectPicture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.RectPicture)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // required uint32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // required uint32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.RectPicture)
}

::google::protobuf::uint8* RectPicture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.RectPicture)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // required uint32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // required uint32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.RectPicture)
  return target;
}

int RectPicture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectPicture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RectPicture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RectPicture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RectPicture::MergeFrom(const RectPicture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RectPicture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectPicture::CopyFrom(const RectPicture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectPicture::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RectPicture::Swap(RectPicture* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RectPicture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectPicture_descriptor_;
  metadata.reflection = RectPicture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraStatus::kCameraIdFieldNumber;
const int CameraStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

CameraStatus::CameraStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.CameraStatus)
}

void CameraStatus::InitAsDefaultInstance() {
}

CameraStatus::CameraStatus(const CameraStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.CameraStatus)
}

void CameraStatus::SharedCtor() {
  _cached_size_ = 0;
  camera_id_ = GOOGLE_ULONGLONG(0);
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraStatus::~CameraStatus() {
  // @@protoc_insertion_point(destructor:PictureProtocol.CameraStatus)
  SharedDtor();
}

void CameraStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraStatus_descriptor_;
}

const CameraStatus& CameraStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

CameraStatus* CameraStatus::default_instance_ = NULL;

CameraStatus* CameraStatus::New() const {
  return new CameraStatus;
}

void CameraStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CameraStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(camera_id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.CameraStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 camera_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.CameraStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.CameraStatus)
  return false;
#undef DO_
}

void CameraStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.CameraStatus)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->camera_id(), output);
  }

  // required bool status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.CameraStatus)
}

::google::protobuf::uint8* CameraStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.CameraStatus)
  // required uint64 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->camera_id(), target);
  }

  // required bool status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.CameraStatus)
  return target;
}

int CameraStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 camera_id = 1;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->camera_id());
    }

    // required bool status = 2;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraStatus::MergeFrom(const CameraStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraStatus::CopyFrom(const CameraStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CameraStatus::Swap(CameraStatus* other) {
  if (other != this) {
    std::swap(camera_id_, other->camera_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraStatus_descriptor_;
  metadata.reflection = CameraStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraStatusList::kCameraStatusFieldNumber;
#endif  // !_MSC_VER

CameraStatusList::CameraStatusList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PictureProtocol.CameraStatusList)
}

void CameraStatusList::InitAsDefaultInstance() {
}

CameraStatusList::CameraStatusList(const CameraStatusList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PictureProtocol.CameraStatusList)
}

void CameraStatusList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraStatusList::~CameraStatusList() {
  // @@protoc_insertion_point(destructor:PictureProtocol.CameraStatusList)
  SharedDtor();
}

void CameraStatusList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraStatusList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraStatusList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraStatusList_descriptor_;
}

const CameraStatusList& CameraStatusList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SendPictureProtocol_2eproto();
  return *default_instance_;
}

CameraStatusList* CameraStatusList::default_instance_ = NULL;

CameraStatusList* CameraStatusList::New() const {
  return new CameraStatusList;
}

void CameraStatusList::Clear() {
  camerastatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraStatusList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PictureProtocol.CameraStatusList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PictureProtocol.CameraStatus cameraStatus = 1;
      case 1: {
        if (tag == 10) {
         parse_cameraStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camerastatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cameraStatus;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PictureProtocol.CameraStatusList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PictureProtocol.CameraStatusList)
  return false;
#undef DO_
}

void CameraStatusList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PictureProtocol.CameraStatusList)
  // repeated .PictureProtocol.CameraStatus cameraStatus = 1;
  for (int i = 0; i < this->camerastatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->camerastatus(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PictureProtocol.CameraStatusList)
}

::google::protobuf::uint8* CameraStatusList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PictureProtocol.CameraStatusList)
  // repeated .PictureProtocol.CameraStatus cameraStatus = 1;
  for (int i = 0; i < this->camerastatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->camerastatus(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PictureProtocol.CameraStatusList)
  return target;
}

int CameraStatusList::ByteSize() const {
  int total_size = 0;

  // repeated .PictureProtocol.CameraStatus cameraStatus = 1;
  total_size += 1 * this->camerastatus_size();
  for (int i = 0; i < this->camerastatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camerastatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraStatusList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraStatusList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraStatusList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraStatusList::MergeFrom(const CameraStatusList& from) {
  GOOGLE_CHECK_NE(&from, this);
  camerastatus_.MergeFrom(from.camerastatus_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraStatusList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraStatusList::CopyFrom(const CameraStatusList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraStatusList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->camerastatus())) return false;
  return true;
}

void CameraStatusList::Swap(CameraStatusList* other) {
  if (other != this) {
    camerastatus_.Swap(&other->camerastatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraStatusList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraStatusList_descriptor_;
  metadata.reflection = CameraStatusList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PictureProtocol

// @@protoc_insertion_point(global_scope)
